import json
import os
import psycopg2
from typing import Dict, Any

def get_lua_knowledge(query: str, conn) -> str:
    cursor = conn.cursor()
    
    query_lower = query.lower()
    keywords = query_lower.split()
    
    cursor.execute("""
        SELECT topic, description, code_example, explanation
        FROM lua_knowledge_base
        WHERE 
            keywords && %s::text[]
            OR LOWER(topic) LIKE %s
            OR LOWER(description) LIKE %s
        ORDER BY 
            CASE 
                WHEN LOWER(topic) = %s THEN 1
                WHEN LOWER(topic) LIKE %s THEN 2
                ELSE 3
            END
        LIMIT 3
    """, (keywords, f'%{query_lower}%', f'%{query_lower}%', query_lower, f'%{query_lower}%'))
    
    results = cursor.fetchall()
    cursor.close()
    
    if not results:
        return generate_generic_lua_response(query)
    
    response_parts = []
    for topic, description, code_example, explanation in results:
        response = f"**{topic}**\n\n"
        if description:
            response += f"{description}\n\n"
        if code_example:
            response += f"```lua\n{code_example}\n```\n\n"
        if explanation:
            response += f"{explanation}\n"
        response_parts.append(response.strip())
    
    return "\n\n---\n\n".join(response_parts)

def generate_generic_lua_response(query: str) -> str:
    query_lower = query.lower()
    
    if 'function' in query_lower or '—Ñ—É–Ω–∫—Ü–∏—è' in query_lower:
        return """**–§—É–Ω–∫—Ü–∏–∏ –≤ Lua**

–§—É–Ω–∫—Ü–∏–∏ –æ–±—ä—è–≤–ª—è—é—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞ `function`:

```lua
function greet(name)
    return "Hello, " .. name
end

print(greet("World"))
```

–ú–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:

```lua
local add = function(a, b)
    return a + b
end
```"""
    
    if 'table' in query_lower or '—Ç–∞–±–ª–∏—Ü–∞' in query_lower:
        return """**–¢–∞–±–ª–∏—Ü—ã –≤ Lua**

–¢–∞–±–ª–∏—Ü—ã ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:

```lua
local person = {
    name = "John",
    age = 30,
    skills = {"Lua", "Python"}
}

print(person.name)
print(person.skills[1])
```"""
    
    if 'loop' in query_lower or '—Ü–∏–∫–ª' in query_lower or 'for' in query_lower:
        return """**–¶–∏–∫–ª—ã –≤ Lua**

```lua
-- –ß–∏—Å–ª–æ–≤–æ–π for
for i = 1, 10 do
    print(i)
end

-- Generic for (–∏—Ç–µ—Ä–∞—Ü–∏—è)
local arr = {10, 20, 30}
for index, value in ipairs(arr) do
    print(index, value)
end

-- While —Ü–∏–∫–ª
local count = 0
while count < 5 do
    count = count + 1
    print(count)
end
```"""
    
    return """–Ø ‚Äî MadAI, —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Lua! 

–°–ø—Ä–æ—Å–∏—Ç–µ –º–µ–Ω—è –æ:
‚Ä¢ –§—É–Ω–∫—Ü–∏—è—Ö –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
‚Ä¢ –¢–∞–±–ª–∏—Ü–∞—Ö –∏ –º–∞—Å—Å–∏–≤–∞—Ö
‚Ä¢ –¶–∏–∫–ª–∞—Ö –∏ —É—Å–ª–æ–≤–∏—è—Ö
‚Ä¢ –û–û–ü –≤ Lua
‚Ä¢ –ú–µ—Ç–∞—Ç–∞–±–ª–∏—Ü–∞—Ö
‚Ä¢ –ö–æ—Ä—É—Ç–∏–Ω–∞—Ö

–ü—Ä–∏–º–µ—Ä: "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –≤ Lua?" """

def verify_api_key(api_key: str, telegram_token: str, conn) -> bool:
    cursor = conn.cursor()
    cursor.execute("""
        SELECT tb.id 
        FROM telegram_bots tb
        JOIN api_keys ak ON tb.api_key_id = ak.id
        WHERE ak.key = %s AND tb.telegram_token = %s AND tb.is_active = true
    """, (api_key, telegram_token))
    result = cursor.fetchone()
    cursor.close()
    return result is not None

def send_telegram_message(chat_id: int, text: str, bot_token: str):
    import urllib.request
    import urllib.parse
    
    url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
    
    data = urllib.parse.urlencode({
        'chat_id': chat_id,
        'text': text,
        'parse_mode': 'Markdown'
    }).encode()
    
    try:
        req = urllib.request.Request(url, data=data)
        urllib.request.urlopen(req)
    except Exception as e:
        print(f"Error sending message: {e}")

def handler(event: Dict[str, Any], context: Any) -> Dict[str, Any]:
    '''
    Business: Telegram webhook –¥–ª—è MadAI –±–æ—Ç–∞ —Å Lua —ç–∫—Å–ø–µ—Ä—Ç–∏–∑–æ–π
    Args: event - webhook –æ—Ç Telegram, context - —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç
    Returns: HTTP response
    '''
    method: str = event.get('httpMethod', 'POST')
    
    if method == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': {
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type, X-Api-Key, X-Telegram-Bot-Token',
                'Access-Control-Max-Age': '86400'
            },
            'body': ''
        }
    
    if method != 'POST':
        return {
            'statusCode': 405,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Method not allowed'})
        }
    
    headers = event.get('headers', {})
    api_key = headers.get('x-api-key') or headers.get('X-Api-Key')
    telegram_token = headers.get('x-telegram-bot-token') or headers.get('X-Telegram-Bot-Token')
    
    if not api_key or not telegram_token:
        return {
            'statusCode': 401,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Missing API key or Telegram token'})
        }
    
    database_url = os.environ.get('DATABASE_URL')
    if not database_url:
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Database not configured'})
        }
    
    conn = psycopg2.connect(database_url)
    
    if not verify_api_key(api_key, telegram_token, conn):
        conn.close()
        return {
            'statusCode': 403,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': 'Invalid API key or bot not configured'})
        }
    
    try:
        body_data = json.loads(event.get('body', '{}'))
        
        if 'message' in body_data:
            message = body_data['message']
            chat_id = message['chat']['id']
            user_text = message.get('text', '')
            
            if user_text.startswith('/start'):
                response_text = """üöÄ MadAI Telegram Bot –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!

–Ø ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ Lua –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é –∏ –º–æ–≥—É –ø–æ–º–æ—á—å —Å:

‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—Å–æ–º –∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ Lua
‚úÖ –¢–∞–±–ª–∏—Ü–∞–º–∏ –∏ –º–µ—Ç–∞—Ç–∞–±–ª–∏—Ü–∞–º–∏
‚úÖ –û–û–ü –≤ Lua
‚úÖ –ü—Ä–∏–º–µ—Ä–∞–º–∏ –∫–æ–¥–∞
‚úÖ –û—Ç–ª–∞–¥–∫–æ–π –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π

–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å!"""
            else:
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO chat_messages (role, content)
                    VALUES ('user', %s)
                """, (user_text,))
                conn.commit()
                cursor.close()
                
                ai_response = get_lua_knowledge(user_text, conn)
                
                cursor = conn.cursor()
                cursor.execute("""
                    INSERT INTO chat_messages (role, content)
                    VALUES ('assistant', %s)
                """, (ai_response,))
                conn.commit()
                cursor.close()
                
                response_text = ai_response
            
            send_telegram_message(chat_id, response_text, telegram_token)
        
        conn.close()
        
        return {
            'statusCode': 200,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'ok': True})
        }
        
    except Exception as e:
        if conn:
            conn.close()
        return {
            'statusCode': 500,
            'headers': {'Content-Type': 'application/json'},
            'body': json.dumps({'error': str(e)})
        }